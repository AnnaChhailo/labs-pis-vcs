[{"name":"GOLDiInterface\\GOLDiInterface.c","content":"// ######################################################################################\r\n// #                                                                                    #\r\n// #  This module is needed for the communication with the GOLDi infrastructure         #\r\n// #                                                                                    #\r\n// ######################################################################################\r\n\r\n#include <stdint.h>\r\n#include <util/delay.h>\r\n\r\n#include \"GOLDiInterface.h\"\r\n#include \"UART0.h\"\r\n\r\n#include \"../UserDesign/UserDesign.h\"\r\n\r\nuint8_t *GOLDiInterfaceOutputBuffer;\r\nuint8_t *GOLDiInterfaceInputBuffer;\r\n\r\nuint8_t ReceiveIndex;\r\nuint8_t TmpBuffer[6];\r\n\r\n// ######################################################################################\r\n// #  This function initializes the bus interface                                       #\r\n// ######################################################################################\r\nvoid GOLDiInterfaceInit(void)\r\n{\r\n    UART0_init();\r\n    \r\n    GOLDiInterfaceOutputBuffer = (uint8_t *)&Actuators;\r\n    GOLDiInterfaceInputBuffer = (uint8_t *)&Sensors;\r\n    ReceiveIndex = 0;\r\n}\r\n   \r\n// ######################################################################################\r\n// #  This function sends data (actuators) to the GOLDi bus                             #\r\n// ######################################################################################\r\nvoid GOLDiInterfaceSendData(void)\r\n{\r\n    UART0_put_char(0xFF);\r\n    \r\n    for (uint8_t i=0; i<6;i++)\r\n    {\r\n        if(GOLDiInterfaceOutputBuffer[i] >= 0x80)\r\n        {\r\n            UART0_put_char(0x80);\r\n            UART0_put_char(GOLDiInterfaceOutputBuffer[i]-0x80);\r\n        }\r\n        else\r\n        {\r\n            UART0_put_char(0);\r\n            UART0_put_char(GOLDiInterfaceOutputBuffer[i]);\r\n        }\r\n    }\r\n    \r\n    UART0_put_char(0xFE);\r\n}\r\n\r\n// ######################################################################################\r\n// #  This functions receives data (sensors) from the GOLDi bus                         #\r\n// ######################################################################################\r\nvoid GOLDiInterfaceNewData(uint8_t Data)\r\n{\r\n    switch(Data)\r\n    {\r\n        case 0xFF:\r\n            //start data transfer\r\n            ReceiveIndex=0;\r\n            break;\r\n        case 0xFE:\r\n            //data transfer ended\r\n            for (uint8_t i=0; i<6;i++)\r\n                GOLDiInterfaceInputBuffer[i] = TmpBuffer[i];\r\n            ReceiveIndex=0;\r\n            break;\r\n        default:\r\n            if(ReceiveIndex%2 == 1)\r\n                TmpBuffer[ReceiveIndex/2]+= Data;\r\n            else\r\n                TmpBuffer[ReceiveIndex/2] = Data;\r\n            ReceiveIndex++;\r\n            break;\r\n    }\r\n}","reload":false,"severity":0,"markers":[]},{"name":"GOLDiInterface\\GOLDiInterface.h","content":"// ######################################################################################\r\n// #                                                                                    #\r\n// #  This module is needed for the communication with the GOLDi infrastructure         #\r\n// #                                                                                    #\r\n// ######################################################################################\r\n\r\n#ifndef _GOLDIINTERFACE_H\r\n    #define _GOLDIINTERFACE_H\r\n\r\n    #include <stdint.h>\r\n\r\n    extern void GOLDiInterfaceInit(void);\r\n    extern void GOLDiInterfaceSendData(void);\r\n    extern void GOLDiInterfaceNewData(uint8_t Data);\r\n\r\n    extern uint8_t *GOLDiInterfaceOutputBuffer;\r\n    extern uint8_t *GOLDiInterfaceInputBuffer;\r\n\r\n#endif","reload":false,"severity":0,"markers":[]},{"name":"GOLDiInterface\\UART0.c","content":"// ######################################################################################\r\n// #                                                                                    #\r\n// #  This module is needed for the communication with the GOLDi infrastructure         #\r\n// #                                                                                    #\r\n// ######################################################################################\r\n\r\n#include <avr/io.h>   \r\n#include <stdint.h>\r\n#include <avr/interrupt.h>\r\n#include \"UART0.h\"\r\n#include \"GOLDiInterface.h\"\r\n\r\n// ######################################################################################\r\n// #  This functions receives bytes from the GOLDi bus                                  #\r\n// ######################################################################################\r\nISR(USART0_RX_vect)\r\n{\r\n    uint8_t Data = UDR0;\r\n    GOLDiInterfaceNewData(Data);\r\n}\r\n\r\n// ######################################################################################\r\n// #  This functions initialize the serial port 'UART0'                                 #\r\n// ######################################################################################\r\nvoid UART0_init()\r\n{\r\n    UBRR0L = (F_CPU / (BAUD * 16L) - 1);\r\n    UCSR0B = ((1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0));\r\n    sei();\r\n}\r\n\r\n// ######################################################################################\r\n// #  This functions sends one byte to the GOLDi bus                                    #\r\n// ######################################################################################\r\nvoid UART0_put_char(char data)\r\n{\r\n    while (!(UCSR0A & (1<<UDRE0)));\r\n    UDR0=data;\r\n}","reload":false,"severity":0,"markers":[]},{"name":"GOLDiInterface\\UART0.h","content":"// ######################################################################################\r\n// #                                                                                    #\r\n// #  This module is needed for the communication with the GOLDi infrastructure         #\r\n// #                                                                                    #\r\n// ######################################################################################\r\n\r\n#ifndef _UART0_H\r\n    #define _UART0_H\r\n\r\n    #define BAUD    250000\r\n\r\n    extern void UART0_init();\r\n    extern void UART0_put_char(char data);\r\n\r\n#endif","reload":false,"severity":0,"markers":[]},{"name":"Main.c","content":"// ######################################################################################\r\n// #                                                                                    #\r\n// #  This module implements the users design                                           #\r\n// #                                                                                    #\r\n// ######################################################################################\r\n\r\n#include \"GOLDiInterface/GOLDiInterface.h\"\r\n#include \"UserDesign/UserDesign.h\"\r\n\r\nint main(void)\r\n{\r\n    GOLDiInterfaceInit();                                                                       // Initialize the bus interface\r\n    StateMachineInit();                                                                         // Initialize the finite state machine\r\n    \r\n    while(1)\r\n    {\r\n        StateMachineUpdate();                                                                   // Update the FSM\r\n        GOLDiInterfaceSendData();                                                               // Send new actuators to the GOLDi bus\r\n    }\r\n}","reload":false,"severity":0,"markers":[]},{"name":"Main.h","content":"// ######################################################################################\r\n// #                                                                                    #\r\n// #  This module selects the controlled physical system                                #\r\n// #                                                                                    #\r\n// ######################################################################################\r\n\r\n#ifndef MAIN_H_\r\n    #define MAIN_H_\r\n\r\n// ######################################################################################\r\n// #  Uncomment the controlled physical system                                          #\r\n// ######################################################################################\r\n\r\n    #define PSPU_3AxisPortal\r\n    //#define PSPU_ProductionCell\r\n    //#define PSPU_Elevator3Floor\r\n    //#define PSPU_Elevator4Floor\r\n    //#define PSPU_Elevator4FloorClassic\r\n    //#define PSPU_Pump\r\n    //#define PSPU_Warehouse\r\n    //#define PSPU_Maze\r\n    //#define PSPU_DigitalDemoBoardPSPU\r\n\r\n    \r\n// ######################################################################################\r\n// #  Physical system specific libraries -- DO NOT CHANGE ANYTHING BELOW! --            #\r\n// ######################################################################################\r\n\r\n    #ifdef PSPU_3AxisPortal\r\n        #include \"PhysicalSystems/3AxisPortal.h\"\r\n    #endif\r\n\r\n    #ifdef PSPU_ProductionCell\r\n        #include \"PhysicalSystems/ProductionCell.h\"\r\n    #endif\r\n\r\n    #ifdef PSPU_Elevator3Floor\r\n        #include \"PhysicalSystems/Elevator3Floor.h\"\r\n    #endif\r\n\r\n    #ifdef PSPU_Elevator4Floor\r\n        #include \"PhysicalSystems/Elevator4Floor.h\"\r\n    #endif\r\n    \r\n    #ifdef PSPU_Elevator4FloorClassic\r\n        #include \"PhysicalSystems/Elevator4Floor.h\"\r\n    #endif\r\n\r\n    #ifdef PSPU_Pump\r\n        #include \"PhysicalSystems/Pump.h\"\r\n    #endif\r\n\r\n    #ifdef PSPU_Warehouse\r\n        #include \"PhysicalSystems/Warehouse.h\"\r\n    #endif\r\n\r\n    #ifdef PSPU_Maze\r\n        #include \"PhysicalSystems/Maze.h\"\r\n    #endif\r\n    \r\n    #ifdef PSPU_DigitalDemoBoardPSPU\r\n        #include \"PhysicalSystems/DigitalDemoBoardPSPU.h\"\r\n    #endif\r\n    \r\n#endif","reload":false,"severity":0,"markers":[]},{"name":"PhysicalSystems\\3AxisPortal.h","content":"// ######################################################################################\r\n// #                                                                                    #\r\n// #  This module defines sensors & actuators for physical system '3AxisPortal'         #\r\n// #                                                                                    #\r\n// ######################################################################################\r\n\r\n#ifndef _3_AXIS_H\r\n    #define _3_AXIS_H\r\n\r\n// ######################################################################################\r\n// #  48bit width sensor vector                                                         #\r\n// ######################################################################################\r\n    typedef struct                                                                   \r\n    {\r\n        unsigned XAxisAtPositionXPlus:1;                                                    // x0\r\n        unsigned XAxisAtPositionXMinus:1;                                                   // x1\r\n        unsigned XAxisAtReferencePosition:1;                                                // x2\r\n        unsigned YAxisAtPositionYPlus:1;                                                    // x3\r\n        unsigned YAxisAtPositionYMinus:1;                                                   // x4\r\n        unsigned YAxisAtReferencePosition:1;                                                // x5\r\n        unsigned ZAxisAtPositionZPlus:1;                                                    // x6\r\n        unsigned ZAxisAtPositionZMinus:1;                                                   // x7\r\n        unsigned ProximitySwitch:1;                                                         // x8\r\n        unsigned UserSwitch:1;                                                              // x9\r\n        unsigned Reserve0:6;                                                                // unused\r\n        unsigned int PositionX;                                                             // x31 ... x16 (LSB)\r\n        unsigned int PositionY;                                                             // x47 ... x32 (LSB)\r\n    } Sensor_t;\r\n\r\n// ######################################################################################\r\n// #  48bit width actuator vector                                                       #\r\n// ######################################################################################\r\n    typedef struct                                      \r\n    {\r\n        unsigned XAxisDriveToXPlus:1;                                                       // y0\r\n        unsigned XAxisDriveToXMinus:1;                                                      // y1\r\n        unsigned YAxisDriveToYPlus:1;                                                       // y2\r\n        unsigned YAxisDriveToYMinus:1;                                                      // y3\r\n        unsigned ZAxisDriveToZPlus:1;                                                       // y4\r\n        unsigned ZAxisDriveToZMinus:1;                                                      // y5\r\n        unsigned Magnet:1;                                                                  // y6\r\n        unsigned Reserve0:1;                                                                // unused\r\n        unsigned char Reserve1;                                                             // unused\r\n        unsigned int Reserve2;                                                              // unused\r\n        unsigned int Reserve3;                                                              // unused\r\n    } Actuator_t;\r\n\r\n    #define SensorPointer (uint8_t *)&Sensors\r\n    #define ActuatorPointer (uint8_t *)&Actuators\r\n\r\n    extern Sensor_t Sensors;\r\n    extern Actuator_t Actuators;\r\n\r\n#endif","reload":false,"severity":0,"markers":[]},{"name":"PhysicalSystems\\DigitalDemoBoardPSPU.h","content":"// ######################################################################################\r\n// #                                                                                    #\r\n// #  This module defines sensors & actuators for physical system 'DigitalDemoBoard'    #\r\n// #                                                                                    #\r\n// ######################################################################################\r\n\r\n#ifndef _DIGITALDEMOBOARDPSPU_H\r\n    #define _DIGITALDEMOBOARDPSPU_H\r\n    \r\n// ######################################################################################\r\n// #  48bit width sensor vector                                                         #\r\n// ######################################################################################\r\n    typedef struct\r\n    {\r\n        unsigned int UndefinedAndToDo1;                                                     // unused (to be defined!)\r\n        unsigned int UndefinedAndToDo2;                                                     // unused (to be defined!)\r\n        unsigned int UndefinedAndToDo3;                                                     // unused (to be defined!)\r\n    } Sensor_t;      \r\n    \r\n// ######################################################################################\r\n// #  48bit width actuator vector                                                       #\r\n// ######################################################################################\r\n    typedef struct\r\n    {\r\n        unsigned int UndefinedAndToDo1;                                                     // unused (to be defined!)\r\n        unsigned int UndefinedAndToDo2;                                                     // unused (to be defined!)\r\n        unsigned int UndefinedAndToDo3;                                                     // unused (to be defined!)\r\n    } Actuator_t;\r\n\r\n    #define SensorPointer (uint8_t *)&Sensors\r\n    #define ActuatorPointer (uint8_t *)&Actuators\r\n\r\n    extern Sensor_t Sensors;\r\n    extern Actuator_t Actuators;\r\n\r\n#endif","reload":false,"severity":0,"markers":[]},{"name":"PhysicalSystems\\Elevator3Floor.h","content":"// ######################################################################################\r\n// #                                                                                    #\r\n// #  This module defines sensors & actuators for physical system 'Elevator3Floor'      #\r\n// #                                                                                    #\r\n// ######################################################################################\r\n\r\n#ifndef _ELEVATOR3FLOOR_H\r\n    #define _ELEVATOR3FLOOR_H\r\n\r\n// ######################################################################################\r\n// #  48bit width sensor vector                                                         #\r\n// ######################################################################################\r\n    typedef struct\r\n    {\r\n        unsigned ElevatorOnFloor1:1;                                                        // x0\r\n        unsigned ElevatorOnFloor2:1;                                                        // x1\r\n        unsigned ElevatorOnFloor3:1;                                                        // x2\r\n        unsigned ElevatorAboveFloor1:1;                                                     // x3\r\n        unsigned ElevatorBelowFloor2:1;                                                     // x4\r\n        unsigned ElevatorAboveFloor2:1;                                                     // x5\r\n        unsigned ElevatorBelowFloor3:1;                                                     // x6\r\n        unsigned Floor1DoorOpen:1;                                                          // x7\r\n        unsigned Floor1DoorClosed:1;                                                        // x8\r\n        unsigned Floor2DoorOpen:1;                                                          // x9\r\n        unsigned Floor2DoorClosed:1;                                                        // x10\r\n        unsigned Floor3DoorOpen:1;                                                          // x11\r\n        unsigned Floor3DoorClosed:1;                                                        // x12\r\n        unsigned LightBarrierFloor1:1;                                                      // x13\r\n        unsigned LightBarrierFloor2:1;                                                      // x14\r\n        unsigned Light_barrier_floor_3:1;                                                   // x15\r\n        unsigned CallButtonFloor1:1;                                                        // x16\r\n        unsigned CallButtonFloor2Up:1;                                                      // x17\r\n        unsigned CallButtonFloor2Down:1;                                                    // x18\r\n        unsigned CallButtonFloor3:1;                                                        // x19\r\n        unsigned ElevatorControlFloor1:1;                                                   // x20\r\n        unsigned ElevatorControlFloor2:1;                                                   // x21\r\n        unsigned ElevatorControlFloor3:1;                                                   // x22\r\n        unsigned ElevatorControlAlert:1;                                                    // x23\r\n        unsigned ElevatorControlEmergencyStop:1;                                            // x24\r\n        unsigned SimulationOverload:1;                                                      // x25\r\n        unsigned Reserve0:1;                                                                // unused\r\n        unsigned Reserve1:1;                                                                // unused\r\n        unsigned Reserve2:1;                                                                // unused\r\n        unsigned Reserve3:1;                                                                // unused\r\n        unsigned Reserve4:1;                                                                // unused\r\n        unsigned Reserve5:1;                                                                // unused\r\n        unsigned int Reserve6;                                                              // unused\r\n    } Sensor_t;          \r\n\r\n// ######################################################################################\r\n// #  48bit width actuator vector                                                       #\r\n// ######################################################################################               \r\n    typedef struct\r\n    {\r\n        unsigned DriveUpwards:1;                                                            // y0\r\n        unsigned DriveDownwards:1;                                                          // y1\r\n        unsigned DriveSlowly:1;                                                             // y2\r\n        unsigned DoorFloor1Open:1;                                                          // y3\r\n        unsigned DoorFloor1Close:1;                                                         // y4\r\n        unsigned DoorFloor2Open:1;                                                          // y5\r\n        unsigned DoorFloor2Close:1;                                                         // y6\r\n        unsigned DoorFloor3Open:1;                                                          // y7\r\n        unsigned DoorFloor3Close:1;                                                         // y8\r\n        unsigned CallDisplayFloor1:1;                                                       // y9\r\n        unsigned CallDisplayFloor2Upward:1;                                                 // y10\r\n        unsigned CallDisplayFloor2Downward:1;                                               // y11\r\n        unsigned CallDisplayFloor3Downward:1;                                               // y12\r\n        unsigned IndicatorDisplayFloor1:1;                                                  // y13\r\n        unsigned IndicatorDisplayFloor2:1;                                                  // y14\r\n        unsigned IndicatorDisplayFloor3:1;                                                  // y15\r\n        unsigned DriveDirectionDisplayDownward:1;                                           // y16\r\n        unsigned DriveDirectionDisplayUpward:1;                                             // y17\r\n        unsigned ElevatorControlIndicatorDisplayFloor1:1;                                   // y18\r\n        unsigned ElevatorControlIndicatorDisplayFloor2:1;                                   // y19\r\n        unsigned ElevatorControlIndicatorDisplayFloor3:1;                                   // y20\r\n        unsigned ElevatorControlAlert:1;                                                    // y21\r\n        unsigned ElevatorControlEmergencyStop:1;                                            // y22\r\n        unsigned ElevatorControlOverload:1;                                                 // y23\r\n        unsigned char Reserve0:1;                                                           // unused\r\n        unsigned int Reserve1;                                                              // unused\r\n    } Actuator_t;\r\n\r\n    #define SensorPointer (uint8_t *)&Sensors\r\n    #define ActuatorPointer (uint8_t *)&Actuators\r\n\r\n    extern Sensor_t Sensors;\r\n    extern Actuator_t Actuators;\r\n\r\n#endif","reload":false,"severity":0,"markers":[]},{"name":"PhysicalSystems\\Elevator4Floor.h","content":"// ######################################################################################\r\n// #                                                                                    #\r\n// #  This module defines sensors & actuators for physical system 'Elevator4Floor'      #\r\n// #                                                                                    #\r\n// ######################################################################################\r\n\r\n#ifndef _ELEVATOR4FLOORS_H\r\n    #define _ELEVATOR4FLOORS_H\r\n\r\n// ######################################################################################\r\n// #  48bit width sensor vector                                                         #\r\n// ######################################################################################\r\n    typedef struct\r\n    {                                                                                       // Elevator3Floor specific\r\n        unsigned ElevatorOnFloor1:1;                                                        // x0\r\n        unsigned ElevatorOnFloor2:1;                                                        // x1\r\n        unsigned ElevatorOnFloor3:1;                                                        // x2\r\n        unsigned ElevatorAboveFloor1:1;                                                     // x3\r\n        unsigned ElevatorBelowFloor2:1;                                                     // x4\r\n        unsigned ElevatorAboveFloor2:1;                                                     // x5\r\n        unsigned ElevatorBelowFloor3:1;                                                     // x6\r\n        unsigned Floor1DoorOpen:1;                                                          // x7\r\n        unsigned Floor1DoorClosed:1;                                                        // x8\r\n        unsigned Floor2DoorOpen:1;                                                          // x9\r\n        unsigned Floor2DoorClosed:1;                                                        // x10\r\n        unsigned Floor3DoorOpen:1;                                                          // x11\r\n        unsigned Floor3DoorClosed:1;                                                        // x12\r\n        unsigned LightBarrierFloor1:1;                                                      // x13\r\n        unsigned LightBarrierFloor2:1;                                                      // x14\r\n        unsigned Light_barrier_floor_3:1;                                                   // x15\r\n        unsigned CallButtonFloor1:1;                                                        // x16\r\n        unsigned CallButtonFloor2Up:1;                                                      // x17\r\n        unsigned CallButtonFloor2Down:1;                                                    // x18\r\n        unsigned CallButtonFloor3:1;                                                        // x19\r\n        unsigned ElevatorControlFloor1:1;                                                   // x20\r\n        unsigned ElevatorControlFloor2:1;                                                   // x21\r\n        unsigned ElevatorControlFloor3:1;                                                   // x22\r\n        unsigned ElevatorControlAlert:1;                                                    // x23\r\n        unsigned ElevatorControlEmergencyStop:1;                                            // x24\r\n        unsigned SimulationOverload:1;                                                      // x25\r\n                                                                                            // Elevator4Floor specific\r\n        unsigned ElevatorOnFloor_4:1;                                                       // x26\r\n        unsigned ElevatorAboveFloor3:1;                                                     // x27\r\n        unsigned ElevatorBelowFloor4:1;                                                     // x28\r\n        unsigned Floor4DoorOpen:1;                                                          // x29\r\n        unsigned Floor4DoorClosed:1;                                                        // x30\r\n        unsigned LightBarrierFloor4:1;                                                      // x31\r\n        unsigned CallButtonFloor3Up:1;                                                      // x32\r\n        unsigned CallButtonFloor4Down:1;                                                    // x33\r\n        unsigned ElevatorControlFloor4:1;                                                   // x34\r\n        unsigned Reserve0:1;                                                                // unused\r\n        unsigned Reserve1:1;                                                                // unused\r\n        unsigned Reserve2:1;                                                                // unused\r\n        unsigned Reserve3:1;                                                                // unused\r\n        unsigned Reserve4:1;                                                                // unused\r\n        unsigned char Reserve5;                                                             // unused\r\n    } Sensor_t;          \r\n\r\n// ######################################################################################\r\n// #  48bit width actuator vector                                                       #\r\n// ######################################################################################             \r\n    typedef struct\r\n    {                                                                                       // Elevator3Floor specific\r\n        unsigned DriveUpwards:1;                                                            // y0\r\n        unsigned DriveDownwards:1;                                                          // y1\r\n        unsigned DriveSlowly:1;                                                             // y2\r\n        unsigned DoorFloor1Open:1;                                                          // y3\r\n        unsigned DoorFloor1Close:1;                                                         // y4\r\n        unsigned DoorFloor2Open:1;                                                          // y5\r\n        unsigned DoorFloor2Close:1;                                                         // y6\r\n        unsigned DoorFloor3Open:1;                                                          // y7\r\n        unsigned DoorFloor3Close:1;                                                         // y8\r\n        unsigned CallDisplayFloor1:1;                                                       // y9\r\n        unsigned CallDisplayFloor2Upward:1;                                                 // y10\r\n        unsigned CallDisplayFloor2Downward:1;                                               // y11\r\n        unsigned CallDisplayFloor3Downward:1;                                               // y12\r\n        unsigned IndicatorDisplayFloor1:1;                                                  // y13\r\n        unsigned IndicatorDisplayFloor2:1;                                                  // y14\r\n        unsigned IndicatorDisplayFloor3:1;                                                  // y15\r\n        unsigned DriveDirectionDisplayDownward:1;                                           // y16\r\n        unsigned DriveDirectionDisplayUpward:1;                                             // y17\r\n        unsigned ElevatorControlIndicatorDisplayFloor1:1;                                   // y18\r\n        unsigned ElevatorControlIndicatorDisplayFloor2:1;                                   // y19\r\n        unsigned ElevatorControlIndicatorDisplayFloor3:1;                                   // y20\r\n        unsigned ElevatorControlAlert:1;                                                    // y21\r\n        unsigned ElevatorControlEmergencyStop:1;                                            // y22\r\n        unsigned ElevatorControlOverload:1;                                                 // y23\r\n                                                                                            // Elevator4Floor specific\r\n        unsigned DoorFloor4Open:1;                                                          // y24\r\n        unsigned DoorFloor4Close:1;                                                         // y25\r\n        unsigned CallDisplayFloor3Upwards:1;                                                // y26\r\n        unsigned CallDisplayFloor4:1;                                                       // y27\r\n        unsigned IndicatorDisplayFloor4:1;                                                  // y28\r\n        unsigned CallDisplayControlElevatorControl:1;                                       // y29\r\n        unsigned Reserve0:1;                                                                // unused\r\n        unsigned Reserve1:1;                                                                // unused\r\n        unsigned int Reserve2;                                                              // unused\r\n    } Actuator_t;\r\n\r\n    #define SensorPointer (uint8_t *)&Sensors\r\n    #define ActuatorPointer (uint8_t *)&Actuators\r\n\r\n    extern Sensor_t Sensors;\r\n    extern Actuator_t Actuators;\r\n\r\n#endif","reload":false,"severity":0,"markers":[]},{"name":"PhysicalSystems\\Maze.h","content":"// ######################################################################################\r\n// #                                                                                    #\r\n// #  This module defines sensors & actuators for physical system 'Maze'                #\r\n// #                                                                                    #\r\n// ######################################################################################\r\n\r\n#ifndef _MAZE_H\r\n    #define _MAZE_H\r\n\r\n// ######################################################################################\r\n// #  48bit width sensor vector                                                         #\r\n// ######################################################################################\r\n    typedef struct\r\n    {\r\n        unsigned int UndefinedAndToDo1;                                                     // unused (to be defined!)\r\n        unsigned int UndefinedAndToDo2;                                                     // unused (to be defined!)\r\n        unsigned int UndefinedAndToDo3;                                                     // unused (to be defined!)\r\n    } Sensor_t;          \r\n\r\n// ######################################################################################\r\n// #  48bit width actuator vector                                                       #\r\n// ######################################################################################\r\n    typedef struct\r\n    {\r\n        unsigned int UndefinedAndToDo1;                                                     // unused (to be defined!)\r\n        unsigned int UndefinedAndToDo2;                                                     // unused (to be defined!)\r\n        unsigned int UndefinedAndToDo3;                                                     // unused (to be defined!)\r\n    } Actuator_t;\r\n\r\n    #define SensorPointer (uint8_t *)&Sensors\r\n    #define ActuatorPointer (uint8_t *)&Actuators\r\n\r\n    extern Sensor_t Sensors;\r\n    extern Actuator_t Actuators;\r\n\r\n#endif","reload":false,"severity":0,"markers":[]},{"name":"PhysicalSystems\\PhysicalSystem.c","content":"// ######################################################################################\r\n// #                                                                                    #\r\n// #  This module creates the sensors & actuator objects                                #\r\n// #                                                                                    #\r\n// ######################################################################################\r\n#include \"../Main.h\"\r\n\r\nSensor_t Sensors;\r\nActuator_t Actuators;","reload":false,"severity":0,"markers":[]},{"name":"PhysicalSystems\\ProductionCell.h","content":"// ######################################################################################\r\n// #                                                                                    #\r\n// #  This module defines sensors & actuators for physical system 'ProductionCell'      #\r\n// #                                                                                    #\r\n// ######################################################################################\r\n\r\n#ifndef _PRODUCTIONCELL_H\r\n    #define _PRODUCTIONCELL_H\r\n\r\n// ######################################################################################\r\n// #  48bit width sensor vector                                                         #\r\n// ######################################################################################\r\n    typedef struct                                                                    \r\n    {\r\n        unsigned TransportTableInLineWithConveyorBelt3:1;                                   // x0\r\n        unsigned TransportTableInLineWithWonveyorBelt1:1;                                   // x1\r\n        unsigned TransportTableWorkpieceAvailable:1;                                        // x2\r\n        unsigned ConveyorBelt1WorkpieceAvailable:1;                                         // x3\r\n        unsigned Turntable1InLineWithConveyorBelt1:1;                                       // x4\r\n        unsigned Turntable1InLineWithConveyorBelt2:1;                                       // x5\r\n        unsigned Turntable1WorkpieceAvailable:1;                                            // x6\r\n        unsigned ConveyorBelt2WorkpieceAvailable:1;                                         // x7\r\n        unsigned Turntable2InLineWithConveyorBelt2:1;                                       // x8\r\n        unsigned Turntable2InLineWithConveyorBelt3:1;                                       // x9\r\n        unsigned Turntable2WorkpieceAvailable:1;                                            // x10\r\n        unsigned ConveyorBelt3WorkpieceAvailable:1;                                         // x11\r\n        unsigned MillingMachineAwayFromConveyorBelt2:1;                                     // x12\r\n        unsigned MillingMachineAtConveyorBelt2:1;                                           // x13\r\n        unsigned MillingHeadIsUp:1;                                                         // x14\r\n        unsigned MillingHeadIsDown:1;                                                       // x15\r\n        unsigned EmergencyStop:1;                                                           // x16\r\n        unsigned Reserve0:1;                                                                // unused\r\n        unsigned Reserve1:1;                                                                // unused\r\n        unsigned Reserve2:1;                                                                // unused\r\n        unsigned Reserve3:1;                                                                // unused\r\n        unsigned Reserve4:1;                                                                // unused\r\n        unsigned Reserve5:1;                                                                // unused\r\n        unsigned Reserve6:1;                                                                // unused\r\n        unsigned char Reserve7;                                                             // unused\r\n        unsigned int Reserve8;                                                              // unused\r\n    } Sensor_t;\r\n    \r\n// ######################################################################################\r\n// #  48bit width actuator vector                                                       #\r\n// ######################################################################################\r\n    typedef struct                                                                         \r\n    {\r\n        unsigned TransportTableMoveToConveyorBelt3:1;                                       // y0\r\n        unsigned TransportTableMoveToConveyorBelt1:1;                                       // y1\r\n        unsigned TransportTableDriveConveyorBeltSimilarToConveyorBelt1:1;                   // y2\r\n        unsigned TransportTableDriveConveyorBeltSimilarToConveyorBelt3:1;                   // y3\r\n        unsigned ConveyorBelt1DriveBelt:1;                                                  // y4\r\n        unsigned Turntable1RotateToConveyorBelt1:1;                                         // y5\r\n        unsigned Turntable1RotateToConveyorBelt2:1;                                         // y6\r\n        unsigned Turntable1DriveBelt:1;                                                     // y7\r\n        unsigned ConveyorBelt2DriveBelt:1;                                                  // y8\r\n        unsigned Turntable2RotateToConveyorBelt2:1;                                         // y9\r\n        unsigned Turntable2RotateToConveyorBelt_3:1;                                        // y10\r\n        unsigned Turntable2DriveBelt:1;                                                     // y11\r\n        unsigned ConveyorBelt3DriveBelt:1;                                                  // y12\r\n        unsigned MillingMachineApproachConveyorBelt_2:1;                                    // y13\r\n        unsigned MillingMachineRetreatFromConveyorBelt2:1;                                  // y14\r\n        unsigned MillingHeadRise:1;                                                         // y15\r\n        unsigned MillingHeadLower:1;                                                        // y16\r\n        unsigned MillingHeadDriveHead:1;                                                    // y17\r\n        unsigned Reserve0:1;                                                                // unused\r\n        unsigned Reserve1:1;                                                                // unused\r\n        unsigned Reserve2:1;                                                                // unused\r\n        unsigned Reserve3:1;                                                                // unused\r\n        unsigned Reserve4:1;                                                                // unused\r\n        unsigned Reserve5:1;                                                                // unused\r\n        unsigned char Reserve6;                                                             // unused\r\n        unsigned int Reserve7;                                                              // unused\r\n    } Actuator_t;\r\n\r\n\r\n    #define SensorPointer (uint8_t *)&Sensors\r\n    #define ActuatorPointer (uint8_t *)&Actuators\r\n\r\n    extern Sensor_t Sensors;\r\n    extern Actuator_t Actuators;\r\n\r\n#endif","reload":false,"severity":0,"markers":[]},{"name":"PhysicalSystems\\Pump.h","content":"// ######################################################################################\r\n// #                                                                                    #\r\n// #  This module defines sensors & actuators for physical system 'Pump'                #\r\n// #                                                                                    #\r\n// ######################################################################################\r\n\r\n#ifndef _PUMP_H\r\n    #define _PUMP_H\r\n    \r\n// ######################################################################################\r\n// #  48bit width sensor vector                                                         #\r\n// ######################################################################################\r\n    typedef struct\r\n    {\r\n        unsigned int UndefinedAndToDo1;                                                     // unused (to be defined!)\r\n        unsigned int UndefinedAndToDo2;                                                     // unused (to be defined!)\r\n        unsigned int UndefinedAndToDo3;                                                     // unused (to be defined!)\r\n    } Sensor_t;    \r\n    \r\n// ######################################################################################\r\n// #  48bit width actuator vector                                                       #\r\n// ######################################################################################\r\n    typedef struct\r\n    {\r\n        unsigned int UndefinedAndToDo1;                                                     // unused (to be defined!)\r\n        unsigned int UndefinedAndToDo2;                                                     // unused (to be defined!)\r\n        unsigned int UndefinedAndToDo3;                                                     // unused (to be defined!)\r\n    } Actuator_t;\r\n\r\n    #define SensorPointer (uint8_t *)&Sensors\r\n    #define ActuatorPointer (uint8_t *)&Actuators\r\n\r\n    extern Sensor_t Sensors;\r\n    extern Actuator_t Actuators;\r\n\r\n#endif","reload":false,"severity":0,"markers":[]},{"name":"PhysicalSystems\\Warehouse.h","content":"// ######################################################################################\r\n// #                                                                                    #\r\n// #  This module defines sensors & actuators for physical system 'Warehouse'           #\r\n// #                                                                                    #\r\n// ######################################################################################\r\n\r\n#ifndef _WAREHOUSE_H\r\n    #define _WAREHOUSE_H\r\n    \r\n// ######################################################################################\r\n// #  48bit width sensor vector                                                         #\r\n// ######################################################################################\r\n    typedef struct\r\n    {\r\n        unsigned int UndefinedAndToDo1;                                                     // unused (to be defined!)\r\n        unsigned int UndefinedAndToDo2;                                                     // unused (to be defined!)\r\n        unsigned int UndefinedAndToDo3;                                                     // unused (to be defined!)\r\n    } Sensor_t;      \r\n    \r\n// ######################################################################################\r\n// #  48bit width actuator vector                                                       #\r\n// ######################################################################################\r\n    typedef struct\r\n    {\r\n        unsigned int UndefinedAndToDo1;                                                     // unused (to be defined!)\r\n        unsigned int UndefinedAndToDo2;                                                     // unused (to be defined!)\r\n        unsigned int UndefinedAndToDo3;                                                     // unused (to be defined!)\r\n    } Actuator_t;\r\n\r\n    #define SensorPointer (uint8_t *)&Sensors\r\n    #define ActuatorPointer (uint8_t *)&Actuators\r\n\r\n    extern Sensor_t Sensors;\r\n    extern Actuator_t Actuators;\r\n\r\n#endif","reload":false,"severity":0,"markers":[]},{"name":"UserDesign\\UserDesign.c","content":"// ######################################################################################\r\n// #                                                                                    #\r\n// #  This module implements the users design                                           #\r\n// #                                                                                    #\r\n// ######################################################################################\r\n\r\n#include <util/delay.h>\r\n#include \"UserDesign.h\"\r\n\r\nAutomatStates_t State;\r\n\r\n\r\n// ######################################################################################\r\n// #  This function initializes the finite state machine with start state               #\r\n// ######################################################################################\r\nvoid StateMachineInit(void)\r\n{\r\n    State = Z0_WaitForFallingEdge;\r\n}\r\n\r\n// ######################################################################################\r\n// #  This function updates the current state of the finite state machine               #\r\n// ######################################################################################\r\nvoid StateMachineUpdate(void)\r\n{\r\n    switch (State)\r\n    {\r\n        case Z0_WaitForFallingEdge:                                                        // Z0\r\n        {\r\n            Actuators.XAxisDriveToXPlus     = 0;\r\n            Actuators.XAxisDriveToXMinus    = 0;\r\n            Actuators.YAxisDriveToYPlus     = 0;\r\n            Actuators.YAxisDriveToYMinus    = 0;\r\n            Actuators.ZAxisDriveToZPlus     = 0;\r\n            Actuators.ZAxisDriveToZMinus    = 0;\r\n            Actuators.Magnet                = 0;\r\n            \r\n            if(!Sensors.UserSwitch && !Sensors.XAxisAtPositionXMinus && !Sensors.YAxisAtPositionYMinus)\r\n                State = Z1_DriveXMinusYMinus;\r\n            else if(!Sensors.UserSwitch && !Sensors.XAxisAtPositionXMinus && Sensors.YAxisAtPositionYMinus)\r\n                State = Z2_DriveXMinus;\r\n            else if(!Sensors.UserSwitch && Sensors.XAxisAtPositionXMinus && !Sensors.YAxisAtPositionYMinus)\r\n                State = Z3_DriveYMinus;\r\n            else if(!Sensors.UserSwitch && Sensors.XAxisAtPositionXMinus && Sensors.YAxisAtPositionYMinus)\r\n                State = Z4_DriveYPlus;\r\n            //else \r\n            //  State = Z0_WaitForFallingEdge;\r\n            \r\n            break;\r\n        }\r\n        \r\n        case Z1_DriveXMinusYMinus:                                                        // Z1\r\n        {\r\n            Actuators.XAxisDriveToXPlus     = 0;\r\n            Actuators.XAxisDriveToXMinus    = 1;\r\n            Actuators.YAxisDriveToYPlus     = 0;\r\n            Actuators.YAxisDriveToYMinus    = 1;\r\n            Actuators.ZAxisDriveToZPlus     = 0;\r\n            Actuators.ZAxisDriveToZMinus    = 0;\r\n            Actuators.Magnet                = 0;\r\n            \r\n            if (!Sensors.XAxisAtPositionXMinus && Sensors.YAxisAtPositionYMinus)\r\n                State = Z2_DriveXMinus;\r\n            else if (Sensors.XAxisAtPositionXMinus && !Sensors.YAxisAtPositionYMinus)\r\n                State = Z3_DriveYMinus;\r\n            else if (Sensors.XAxisAtPositionXMinus && Sensors.YAxisAtPositionYMinus)\r\n                State = Z4_DriveYPlus;\r\n            //else \r\n            //    State = Z1_DriveXMinusYMinus;\r\n            \r\n            break;\r\n        }\r\n        \r\n        case Z2_DriveXMinus:                                                               // Z2\r\n        {\r\n            Actuators.XAxisDriveToXPlus     = 0;\r\n            Actuators.XAxisDriveToXMinus    = 1;\r\n            Actuators.YAxisDriveToYPlus     = 0;\r\n            Actuators.YAxisDriveToYMinus    = 0;\r\n            Actuators.ZAxisDriveToZPlus     = 0;\r\n            Actuators.ZAxisDriveToZMinus    = 0;\r\n            Actuators.Magnet                = 0;\r\n            \r\n            if (Sensors.XAxisAtPositionXMinus)\r\n                State = Z4_DriveYPlus;\r\n            //else\r\n            //    State = Z2_DriveXMinus;\r\n            \r\n            break;\r\n        }\r\n\r\n        case Z3_DriveYMinus:                                                              // Z3\r\n        {\r\n            Actuators.XAxisDriveToXPlus     = 0;\r\n            Actuators.XAxisDriveToXMinus    = 0;\r\n            Actuators.YAxisDriveToYPlus     = 0;\r\n            Actuators.YAxisDriveToYMinus    = 1;\r\n            Actuators.ZAxisDriveToZPlus     = 0;\r\n            Actuators.ZAxisDriveToZMinus    = 0;\r\n            Actuators.Magnet                = 0;\r\n            \r\n            if (Sensors.YAxisAtPositionYMinus)\r\n                State = Z4_DriveYPlus;\r\n            //else\r\n            //    State = Z3_DriveYMinus;\r\n            \r\n            break;\r\n        }\r\n        \r\n        case Z4_DriveYPlus:                                                                // Z4\r\n        {\r\n            Actuators.XAxisDriveToXPlus     = 0;\r\n            Actuators.XAxisDriveToXMinus    = 0;\r\n            Actuators.YAxisDriveToYPlus     = 1;\r\n            Actuators.YAxisDriveToYMinus    = 0;\r\n            Actuators.ZAxisDriveToZPlus     = 0;\r\n            Actuators.ZAxisDriveToZMinus    = 0;\r\n            Actuators.Magnet                = 0;\r\n            \r\n            if (Sensors.YAxisAtPositionYPlus)\r\n                State = Z5_DriveXPlus;\r\n            //else\r\n            //    State = Z4_DriveYPlus;\r\n            \r\n            break;\r\n        }\r\n\r\n        case Z5_DriveXPlus:                                                                // Z5\r\n        {\r\n            Actuators.XAxisDriveToXPlus     = 1;\r\n            Actuators.XAxisDriveToXMinus    = 0;\r\n            Actuators.YAxisDriveToYPlus     = 0;\r\n            Actuators.YAxisDriveToYMinus    = 0;\r\n            Actuators.ZAxisDriveToZPlus     = 0;\r\n            Actuators.ZAxisDriveToZMinus    = 0;\r\n            Actuators.Magnet                = 0;\r\n            \r\n            if (Sensors.XAxisAtPositionXPlus && Sensors.UserSwitch)\r\n                State = Z0_WaitForFallingEdge;\r\n            else if(Sensors.XAxisAtPositionXPlus && !Sensors.UserSwitch)\r\n                State = Z6_WaitForUserSwich;\r\n            //else\r\n            //    State = Z5_DriveXPlus;\r\n            \r\n            break;\r\n        }\r\n\r\n        case Z6_WaitForUserSwich:                                                          // Z6\r\n        {\r\n            Actuators.XAxisDriveToXPlus     = 0;\r\n            Actuators.XAxisDriveToXMinus    = 0;\r\n            Actuators.YAxisDriveToYPlus     = 0;\r\n            Actuators.YAxisDriveToYMinus    = 0;\r\n            Actuators.ZAxisDriveToZPlus     = 0;\r\n            Actuators.ZAxisDriveToZMinus    = 0;\r\n            Actuators.Magnet                = 0;\r\n            \r\n            if (Sensors.UserSwitch)\r\n                State = Z0_WaitForFallingEdge;\r\n            //else\r\n            //    State = Z6_WaitForUserSwich;\r\n            \r\n            break;\r\n        }\r\n\r\n    }\r\n}","reload":false,"severity":0,"markers":[]},{"name":"UserDesign\\UserDesign.h","content":"// ######################################################################################\r\n// #                                                                                    #\r\n// #  This module implements the users design                                           #\r\n// #                                                                                    #\r\n// ######################################################################################\r\n\r\n#ifndef _USERDESIGN_H\r\n    #define _USERDESIGN_H\r\n\r\n    #include \"../Main.h\"\r\n    extern void StateMachineInit(void);                                                     // This function inits the state machine\r\n    extern void StateMachineUpdate(void);                                                   // This function updated the state machine\r\n\r\n// ######################################################################################\r\n// #  Add a new state for state maschine here                                           #\r\n// ######################################################################################\r\n    typedef enum\r\n    {\r\n        Z0_WaitForFallingEdge,                                                                 // Z0 - wait for 1/0 edge\r\n        Z1_DriveXMinusYMinus,                                                                  // Z1 - drive to X- and Y-\r\n        Z2_DriveXMinus,                                                                        // Z2 - drive to X-\r\n        Z3_DriveYMinus,                                                                        // Z3 - drive to Y-\r\n        Z4_DriveYPlus,                                                                         // Z4 - drive to Y+\r\n        Z5_DriveXPlus,                                                                         // Z5 - drive to X+\r\n        Z6_WaitForUserSwich                                                                    // Z6 - wait for UserSwich = 1\r\n    } AutomatStates_t;\r\n    \r\n#endif ","reload":false,"severity":0,"markers":[]}]